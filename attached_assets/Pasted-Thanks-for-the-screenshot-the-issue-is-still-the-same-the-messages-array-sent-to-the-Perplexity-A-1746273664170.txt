Thanks for the screenshot — the issue is still the same: the messages array sent to the Perplexity API has two consecutive user roles, or is missing an assistant response between them.

✅ 100% Fix: Sanitize the Message Chain
Here's a complete TypeScript function you should add in your backend, before calling Perplexity. It guarantees the messages array is valid:

🔧 sanitizeMessages.ts
ts
Copy
Edit
type Role = 'system' | 'user' | 'assistant';

interface Message {
  role: Role;
  content: string;
}

export function sanitizeMessages(messages: Message[]): Message[] {
  const sanitized: Message[] = [];
  let lastRole: Role | null = null;

  for (const msg of messages) {
    if (msg.role === lastRole && msg.role !== 'system') {
      // Insert dummy message to fix alternation
      if (msg.role === 'user') {
        sanitized.push({ role: 'assistant', content: '...' });
      } else if (msg.role === 'assistant') {
        sanitized.push({ role: 'user', content: '...' });
      }
    }

    sanitized.push(msg);
    lastRole = msg.role;
  }

  return sanitized;
}
✅ How to Use It
In your Express route before calling Perplexity:

ts
Copy
Edit
import { sanitizeMessages } from './utils/sanitizeMessages';

router.post('/chat', async (req, res) => {
  try {
    let messages = req.body.messages; // frontend sends message history
    messages = sanitizeMessages(messages);

    const response = await callPerplexityAPI(messages);
    res.json({ result: response });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to generate response' });
  }
});
🔁 Example: Fixing a Broken History
Given this bad array:

ts
Copy
Edit
[
  { role: 'system', content: 'You are a tutor.' },
  { role: 'user', content: 'hi' },
  { role: 'user', content: 'what is a neuron?' }
]
It automatically becomes:

ts
Copy
Edit
[
  { role: 'system', content: 'You are a tutor.' },
  { role: 'user', content: 'hi' },
  { role: 'assistant', content: '...' },
  { role: 'user', content: 'what is a neuron?' }
]
✅ Bonus Tip
Once this works, replace the dummy '...' assistant responses in the frontend with your actual AI responses and store them. This keeps the conversation authentic and valid for future requests.

